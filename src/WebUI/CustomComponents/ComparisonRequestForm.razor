@using Core.DTOs
@using Core.Enums
@using Microsoft.Net.Http.Headers
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@using Newtonsoft.Json
@namespace WebUI.CustomComponents

@if(_errorMessage != string.Empty)
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

<form
    enctype="multipart/form-data">
    <div class="form-group">
        <label for="sourceFile" class="form-label">Source configuration file</label>
        <InputFile accept=".cfg" class="form-control" OnChange="HandleSourceFileChanged"/>
    </div>
    <div class="form-group mt-3">
        <label for="targetFile" class="form-label">Target configuration file</label>
        <InputFile accept=".cfg" class="form-control" OnChange="HandleTargetFileChanged"/>
    </div>
    <div class="form-group mt-3">
        <label for="filter" class="form-label">Filter</label>
        <select name="filter" id="filter" class="form-control" @onchange="HandleFilterTypeChange" required>
            @foreach (var filterName in Enum.GetNames(typeof(FilterType)))
            {
                <option value="@filterName">@filterName</option>
            }
        </select>
        <label class="form-label mt-2" for="filterValue">Filter value</label>
        @if (_selectedFilterType == FilterType.ComparisonResult.ToString())
        {
            <select name="filterValue" @bind="_filterValue" id="filterValue" class="form-control mt-2" required>
                @foreach (var comparisonResult in Enum.GetNames(typeof(ComparisonResult)))
                {
                    <option value="@comparisonResult">@comparisonResult</option>
                }
            </select>
        }
        else
        {
            <input disabled=@(_selectedFilterType==FilterType.None.ToString())
                   type="text" 
                   class="form-control mt-2" 
                   name="filterValue" 
                   @bind="_filterValue"
                   placeholder="@GetPlaceholderValue(ParseStringToFilterType(_selectedFilterType))" 
                   required/>
        }
    </div>
    <div class="form-group mt-4">
        <button type="button" @onclick="SendComparisonRequest" class="btn btn-primary">Compare</button>
    </div>
</form>

@inject IHttpClientFactory ClientFactory
@inject ILogger<ComparisonRequestForm> Logger
@inject ISnackbar Snackbar
@code {
    private string _selectedFilterType = FilterType.None.ToString();
    private string _filterValue = string.Empty;
    private string _lastStringInput = string.Empty;
    private IBrowserFile? _sourceFile;
    private IBrowserFile? _targetFile;
    private string _errorMessage = string.Empty;
    private bool _waitingForResponse = false;

    [Parameter]
    public EventCallback<DeviceConfigurationComparisonDto> OnSendComparisonResult { get; set; }

    private async Task SendComparisonRequest()
    {
        _errorMessage = string.Empty;
        if (_sourceFile == null || _targetFile == null)
        {
            _errorMessage = "Source and target files must be selected";
            return;
        }
        if(_selectedFilterType == FilterType.ParameterIdStartsWith.ToString() && string.IsNullOrWhiteSpace(_filterValue))
        {
            _errorMessage = "Filter value must be provided when filter type is ParameterIdStartsWith";
            return;
        }

        var formContent = CreateMultipartFormDataContent();

        var client = ClientFactory.CreateClient("ComparisonClient");
        var response = await client.PostAsync("/ConfigCompare", formContent);
        var json = await response.Content.ReadAsStringAsync();
        try
        {
            var result = JsonConvert.DeserializeObject<DeviceConfigurationComparisonDto>(json);
            await OnSendComparisonResult.InvokeAsync(result);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Error while deserializing comparison result, API response: {json}", json);
            _errorMessage = $"API error occured. {json}";
            Snackbar.Add("Comparison failed", Severity.Error);
        }
        Snackbar.Add("Comparison successful", Severity.Success);
    }
    
    private MultipartFormDataContent CreateMultipartFormDataContent()
    {
        var formContent = new MultipartFormDataContent();

        var sourceConfig = CreateStreamContent(_sourceFile!);
        var targetConfig = CreateStreamContent(_targetFile!);

        formContent.Add(sourceConfig, "SourceFile", _sourceFile!.Name);
        formContent.Add(targetConfig, "TargetFile", _targetFile!.Name);
        formContent.Add(new StringContent(_selectedFilterType), "Filter.FilterType");
        formContent.Add(new StringContent(_filterValue), "Filter.FilterValue");

        return formContent;
    }

    private StreamContent CreateStreamContent(IBrowserFile file)
    {
        var stream = file.OpenReadStream();
        var content = new StreamContent(stream);
        content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
        return content;
    }

    private void HandleSourceFileChanged(InputFileChangeEventArgs e)
    {
        _sourceFile = e.File;
    }

    private void HandleTargetFileChanged(InputFileChangeEventArgs e)
    {
        _targetFile = e.File;
    }
    
    private FilterType ParseStringToFilterType(string input)
    {
        Enum.TryParse(input, out FilterType filterType);
        return filterType;
    }

    private string GetPlaceholderValue(FilterType filterType)
    {
        return filterType switch
        {
            FilterType.None => "Filter is not used",
            FilterType.ParameterIdStartsWith => "Filter IDs that start with...",
            _ => string.Empty
        };
    }

    private void HandleFilterTypeChange(ChangeEventArgs eventArgs)
    {
        // Save last string input if filter type is changed from ParameterIdStartsWith to another
        if(_selectedFilterType == FilterType.ParameterIdStartsWith.ToString())
            _lastStringInput = _filterValue;

        // Set filter value to last string input if filter type is changed from another to ParameterIdStartsWith
        if (eventArgs.Value as string == FilterType.ParameterIdStartsWith.ToString())
            _filterValue = _lastStringInput;
        
        // Set filter value to first enum value if filter type is changed to ComparisonResult
        if(eventArgs.Value as string == FilterType.ComparisonResult.ToString())
            _filterValue = Enum.GetNames(typeof(ComparisonResult)).First();
        
        // Set filter value to empty string if filter type is changed to None
        if(eventArgs.Value as string == FilterType.None.ToString())
            _filterValue = string.Empty;
        
        _selectedFilterType = eventArgs.Value as string ?? string.Empty;
    }
}